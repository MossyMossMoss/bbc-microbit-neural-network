import microbit
import random
import math

training_input = [[1, 0, 0, 1, 1], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0], [1, 1, 1, 0, 1]]
training_output = [1, 0, 0, 1]

testing_input = [0, 1, 1, 1, 1]

bias0 = [0 for i in range(4)]
bias1 = [0 for i in range(1)]

random.seed()

def ran_normal(num, mu, sig):
    return math.exp(1/(sig*((2*math.pi)**(1/2))))**(-(1/2)*((num-mu)/sig)**2)

def matrix_multiply(matrix, vector):
    result = [0]*len(matrix)
    for i in range(len(matrix)):
        for ii in range(len(matrix[i])):
            result[i]+=vector[ii]*matrix[i][ii]
    return result

def sigmoid(num, deriv=False):
    return 1/(1+math.exp(-num))

def sigmoid_p(x):
    return sigmoid(x) * (1-sigmoid(x))

def add_bias(vector, bias):
    result = vector
    for i in range(len(vector)):
        result[i] += bias[i]
    return result

def transpose(matrix):
    return [[matrix[c][r] for c in range(len(matrix))] for r in range(len(matrix[0]))] 

def train():
    syn0 = [[ran_normal(random.random(), 0, 0.5) for i in range(4)] for i in range(4)]
    syn1 = [[ran_normal(random.random(), 0, 0.5) for i in range(4)] for i in range(1)]

    bias0 = [0 for i in range(4)]
    bias1 = [0 for i in range(1)]

    costs = []
    
    iterations = 1000
    learning_rate = 0.2
    
    load_pixel = [0, 0]
    
    microbit.display.clear()
    for i in range(iterations):
        if (i+1)%(iterations/25) == 0:
            if load_pixel != [4, 4]:
                if load_pixel[0] != 4:
                    load_pixel[0] += 1
                else:
                    load_pixel[0] = 0
                    load_pixel[1] += 1
        microbit.display.set_pixel(load_pixel[0], load_pixel[1], 9)
        ri = random.randint(0, len(training_input) - 1)
        inp = training_input[ri]
        
        l0 = add_bias(matrix_multiply(syn0, inp), bias0)
        for ii in range(len(l0)):
            l0[ii] = sigmoid(l0[ii])
        l1 = add_bias(matrix_multiply(syn1, l0), bias1)
        for ii in range(len(l1)):
            l1[ii] = sigmoid(l1[ii])
        out = l1[0]
        target = training_output[ri]
        cost = (out - target)**2

        dcost_dpred = 2 * (out - target)
        dpred_dout = sigmoid_p(out)

        dcost_dout = dcost_dpred * dpred_dout
        
        for r in range(len(syn0)):
            for c in range(len(syn0[r])):
                dcost_w = dcost_dout * inp[c]
                syn0[r][c] = syn0[r][c] - learning_rate * dcost_w
        for r in range(len(syn1)):
            for c in range(len(syn1[r])):
                dcost_w = dcost_dout * inp[c]
                syn1[r][c] = syn1[r][c] - learning_rate * dcost_w
        for n in range(len(bias0)):
            dcost_b = dcost_dout * inp[c]
            bias0[n] = bias0[n] - learning_rate * dcost_b
        for n in range(len(bias1)):
            dcost_b = dcost_dout * inp[c]
            bias1[n] = bias1[n] - learning_rate * dcost_b

    # testing
    inp = testing_input
    l0 = add_bias(matrix_multiply(syn0, inp), bias0)
    for ii in range(len(l0)):
        l0[ii] = sigmoid(l0[ii])
    l1 = add_bias(matrix_multiply(syn1, l0), bias1)
    for ii in range(len(l1)):
        l1[ii] = sigmoid(l1[ii])

    microbit.display.clear()
    microbit.display.scroll(l1[0])

while True:
    complete_input = training_input[0:4] + [testing_input]
    for i in range(len(complete_input)):
        for ii in range(len(complete_input[i])):
            microbit.display.set_pixel(ii, i, complete_input[i][ii] * 9)
    if microbit.button_b.is_pressed():
        for i in range(6):
            microbit.display.clear()
            if i%2 == 0:
                for ii in range(5):
                    microbit.display.set_pixel(ii, 4, testing_input[ii] * 9)
            microbit.sleep(500)
        train()
    elif microbit.button_a.is_pressed():
        training_input = [[random.randint(0, 1) for i in range(5)] for i in range(4)]
        training_output = [training_input[i][0] for i in range(len(training_input))]
        
        testing_input = [random.randint(0, 1) for i in range(5)]

